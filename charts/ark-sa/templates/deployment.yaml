apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ark-server.fullname" . }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ include "ark-server.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "ark-server.name" . }}
    spec:
      initContainers:
        - name: set-permissions
          image: opensuse/leap
          command:
            - /bin/bash
            - -c
            - >
              chown -Rv 25000:25000 /steam &&
              chown -Rv 25000:25000 /steamcmd &&
              chown -Rv 25000:25000 /server-files &&
              chown -Rv 25000:25000 /cluster-shared
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: steam
              mountPath: /steam
            - name: steamcmd
              mountPath: /steamcmd
            - name: ark
              mountPath: /server-files
            - name: cluster
              mountPath: /cluster-shared
      containers:
        - name: ark
          image: {{ .Values.server.image }}
          command: ["/usr/bin/start_server"]
          securityContext:
            runAsUser: 25000  # Game server user ID
            runAsGroup: 25000 # Game server group ID
          env:
            - name: SERVER_MAP
              value: "{{ .Values.server.map }}"
            - name: SERVER_NAME
              value: "{{ .Values.server.name }}"
            - name: SERVER_PASSWORD
              value: "{{ .Values.server.password }}"
            - name: SERVER_ADMIN_PASSWORD
              value: "{{ .Values.server.adminPassword }}"
            - name: ASA_START_PARAMS
              value: |
                {{- if .Values.server.startParams }}
                  {{ .Values.server.startParams | replace "\n" "" }}
                {{- else }}
                  {{- $mods := .Values.server.mods | default list }}
                  {{- $modstr := "" }}
                  {{- if $mods }}
                    {{- $modstr = printf " -mods=%s" (join "," $mods) }}
                  {{- end }}
                  {{ printf "%s?listen?Port=%d?RCONPort=%d?RCONEnabled=%s?SessionName=%s -WinLiveMaxPlayers=%d -clusterid=%s -ClusterDirOverride=/home/gameserver/cluster-shared%s"
                    (.Values.server.map | default "TheIsland_WP")
                    (int .Values.service.gamePort)
                    (int .Values.service.rconPort)
                    (ternary "True" "False" (gt (int .Values.service.rconPort) 0))
                    .Values.server.name
                    (int (.Values.server.maxPlayers | default 32))
                    .Values.server.clusterID
                    $modstr
                  }}
                {{- end }}
            - name: ENABLE_DEBUG
              value: '{{ ternary "1" "0" .Values.server.debug }}'
          ports:
            - containerPort: {{ .Values.service.gamePort }}
              protocol: UDP
            - containerPort: {{ .Values.service.peerPort }}
              protocol: UDP
            - containerPort: {{ .Values.service.queryPort }}
              protocol: UDP
            {{- if and .Values.service.rconPort (gt (int .Values.service.rconPort) 0) }}
            - containerPort: {{ .Values.service.rconPort }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            - name: steam
              mountPath: /home/gameserver/Steam
            - name: ark
              mountPath: /home/gameserver/server-files
            - name: cluster
              mountPath: /home/gameserver/cluster-shared
            - name: steamcmd
              mountPath: /home/gameserver/steamcmd
          # startupProbe:
          #   exec:
          #     command:
          #       - /bin/sh
          #       - -c
          #       - 'grep -q ":{{ printf "%X" .Values.service.gamePort }}" /proc/net/udp'
          #   initialDelaySeconds: 60
          #   # Allows up to 30 minutes (threshold * period) for the server to start.
          #   # Long enough for the files to download and extract.
          #   failureThreshold: 60
          #   periodSeconds: 30
          # livenessProbe:
          #   exec:
          #     command:
          #       - /bin/sh
          #       - -c
          #       - 'grep -q ":{{ printf "%X" .Values.service.gamePort }}" /proc/net/udp'
          #   failureThreshold: 3
          #   periodSeconds: 10
          # readinessProbe:
          #   exec:
          #     command:
          #       - /bin/sh
          #       - -c
          #       - 'grep -q ":{{ printf "%X" .Values.service.gamePort }}" /proc/net/udp'
          #   failureThreshold: 3
          #   periodSeconds: 10
      volumes:
        - name: ark
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.ark.existingClaim | default (printf "%s-ark" (include "ark-server.fullname" .)) }}
        - name: steamcmd
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.steamcmd.existingClaim | default (printf "%s-steamcmd" (include "ark-server.fullname" .)) }}
        - name: cluster
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.cluster.existingClaim | default (printf "%s-cluster" (include "ark-server.fullname" .)) }}
        - name: steam
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.steam.existingClaim | default (printf "%s-steam" (include "ark-server.fullname" .)) }}
